name: Build mobile-ffmpeg 4.4.LTS (full-gpl, 16KB page size)

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build-mobile-ffmpeg-16k.yml"

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
      ANDROID_NDK_ROOT: ${{ github.workspace }}/android-ndk
      JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
      # Force 16KB segment alignment at link time (lld)
      LDFLAGS: "-Wl,-z,max-page-size=16384"
      # Optional: you can also add common-page-size; not required for Play checks
      # LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=4096"

    steps:
      - name: Checkout (this repo just hosts the workflow)
        uses: actions/checkout@v4

      - name: Install packages (host build deps)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            autoconf automake libtool pkg-config curl cmake \
            gcc g++ make gperf texinfo yasm nasm bison autogen patch git \
            unzip zip python3 jq

      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK cmdline-tools + platforms + build-tools
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_HOME"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_HOME"

          # After unzip, we have $ANDROID_HOME/cmdline-tools/{bin,lib,...} or $ANDROID_HOME/cmdline-tools/cmdline-tools/...
          # Normalize to .../cmdline-tools/latest/*
          if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
            mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
            mv "$ANDROID_HOME/cmdline-tools/cmdline-tools/"* "$ANDROID_HOME/cmdline-tools/latest/"
            rm -rf "$ANDROID_HOME/cmdline-tools/cmdline-tools"
          else
            # zip sometimes unpacks directly to cmdline-tools/{bin,lib,...}
            mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
            shopt -s extglob
            mv "$ANDROID_HOME/cmdline-tools"/!(latest) "$ANDROID_HOME/cmdline-tools/latest/" || true
          fi

          # Make sdkmanager available on PATH for subsequent steps
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

          sdkmanager --version
          yes | sdkmanager --licenses
          yes | sdkmanager \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0"

      - name: Install Android NDK r27b
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;27.2.12479018"
          ln -s "$ANDROID_HOME/ndk/27.2.12479018" "$ANDROID_NDK_HOME"

      - name: Clone mobile-ffmpeg (4.4 LTS source)
        run: |
          git clone https://github.com/tanersener/mobile-ffmpeg.git
          cd mobile-ffmpeg
          # Checkout the 4.4 LTS line (archived but builds fine)
          # If tag name differs, list tags with: git tag -l | grep 4.4
          git checkout 4.4.LTS || git checkout v4.4.LTS || true

      - name: Build Android AAR (full-gpl, arm64-v8a) with 16KB alignment
        working-directory: mobile-ffmpeg
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: |
          set -e

          # Ensure build scripts see the flags:
          export CFLAGS="$CFLAGS"
          export CXXFLAGS="$CXXFLAGS"
          export LDFLAGS="$LDFLAGS"

          # Build options:
          # --lts          : build the LTS variant (matches 4.4.LTS distribution)
          # --full         : include all external libraries (non-GPL)
          # --enable-gpl   : switch FFmpeg to GPL (this produces the *-full-gpl flavor)
          # --disable-[abi]: limit to the ABI(s) you actually need; 16KB matters for arm64
          chmod +x android.sh
          ./android.sh --lts --full --enable-gpl \
            --disable-arm-v7a --disable-x86 --disable-x86-64

      - name: Verify 16KB segment alignment (p_align) in built .so
        run: |
          set -e
          find mobile-ffmpeg/prebuilt -type f -name "*.so" -path "*arm64-v8a*" -print0 | while IFS= read -r -d '' so ; do
            echo "==== $so"
            # Check program headers for p_align
            readelf -l "$so" | awk '/Segment/ || /LOAD/ {print}'
          done

      - name: Collect AAR artifact
        run: |
          mkdir -p out
          # The AAR lands under prebuilt/android-aar/
          AAR=$(find mobile-ffmpeg/prebuilt/android-aar -maxdepth 1 -type f -name "*.aar" | head -n1)
          cp "$AAR" out/mobile-ffmpeg-full-gpl-4.4.LTS-16k.aar
          echo "AAR => out/mobile-ffmpeg-full-gpl-4.4.LTS-16k.aar"

      - name: Upload AAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-ffmpeg-full-gpl-4.4.LTS-16k
          path: out/mobile-ffmpeg-full-gpl-4.4.LTS-16k.aar
