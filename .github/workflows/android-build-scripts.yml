name: android build scripts

on:
  workflow_dispatch: # Allows manual triggering, which will create a release
  push:
    branches:
      - development
      - main
    paths:
      - ".github/workflows/android-build-scripts.yml"
      - "android/**"
      - "!android/README.md"
      - "scripts/**"
      - "tools/**"
      - "android.sh"
  pull_request:
    branches:
      - development
      - main
    paths:
      - ".github/workflows/android-build-scripts.yml"
      - "android/**"
      - "!android/README.md"
      - "scripts/**"
      - "tools/**"
      - "android.sh"

jobs:
  build-main-on-linux:
    name: android main on linux (ndk-r28-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # important for git describe/tags

      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"
      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up Android NDK r28 (16k support)
        run: |
          set -euxo pipefail
          # Install NDK r28 via sdkmanager. If sdkmanager doesn't have an exact numeric label in the runner,
          # this attempts to install the platform component named for r28. Adjust the component name if your
          # environment requires a different identifier (for example, 'ndk;28.0.25739011').
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;28.0.0" || true
          # Pick the most recent ndk folder installed under $ANDROID_HOME/ndk
          NDK_PATH=$(ls -d ${ANDROID_HOME}/ndk/* 2>/dev/null | sort || true | tail -n1)
          if [ -z "$NDK_PATH" ]; then
            echo "ERROR: failed to locate installed NDK under ${ANDROID_HOME}/ndk"
            ls -la ${ANDROID_HOME} || true
            exit 1
          fi
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
      - name: run the build script
        env:
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: |
          set -euxo pipefail

          # 1) Ensure we are at the repo root and android.sh is executable
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          cd "$GITHUB_WORKSPACE"
          test -f android.sh || { echo "android.sh not found in repo root"; exit 1; }
          chmod +x android.sh

          # 2) Make this directory 'safe' for git and ensure tags exist
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git rev-parse --is-inside-work-tree
          # ffmpeg-kit scripts sometimes call `git describe` â†’ needs tags
          git fetch --tags --prune --force || true
          # if checkout was shallow, unshallow so describe works
          git fetch --unshallow || true

          # 3) Run build exactly like your original flags
          # Use NDK r28 and build for ARM64 only. NDK r28 defaults are compatible with 16KB pages so
          # no explicit --page-size is required. We still explicitly disable 32-bit ABIs to ensure only
          # arm64 builds are produced.
          ./android.sh -d --enable-android-media-codec --enable-android-zlib \
            --disable-arm-v7a --disable-arm-v7a-neon --disable-x86 --disable-x86-64

            - name: prepare and upload main aar
              run: |
                AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
                if [ -z "$AAR_PATH" ]; then
                  echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
                  exit 1
                fi
                mv "$AAR_PATH" "ffmpeg-kit-main-ndk-r28-16k.aar"
            - uses: actions/upload-artifact@v4
              with:
                name: ffmpeg-kit-main-aar
                path: ffmpeg-kit-main-ndk-r25-16k.aar
                if-no-files-found: error
            - name: print build logs
              if: always()
              run: cat build.log
            - name: print ffbuild logs
              if: failure()
              run: "[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log"

  build-lts-on-linux:
    name: android lts on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # important for git describe/tags

      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"
      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up Android NDK r28 (16k support)
        run: |
          set -euxo pipefail
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;28.0.0" || true
          NDK_PATH=$(ls -d ${ANDROID_HOME}/ndk/* 2>/dev/null | sort || true | tail -n1)
          if [ -z "$NDK_PATH" ]; then
            echo "ERROR: failed to locate installed NDK under ${ANDROID_HOME}/ndk"
            ls -la ${ANDROID_HOME} || true
            exit 1
          fi
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
      - name: run the build script
        env:
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: |
          set -euxo pipefail
          cd "$GITHUB_WORKSPACE"
          test -f android.sh || { echo "android.sh not found in repo root"; exit 1; }
          chmod +x android.sh
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git rev-parse --is-inside-work-tree
          git fetch --tags --prune --force || true
          git fetch --unshallow || true
          ./android.sh -d --lts --enable-android-media-codec --enable-android-zlib \
            --disable-arm-v7a --disable-arm-v7a-neon --disable-x86 --disable-x86-64

      - name: prepare and upload lts aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-lts-ndk-r28-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-lts-aar
          path: ffmpeg-kit-lts-ndk-r25-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: always()
        run: cat build.log
      - name: print ffbuild logs
        if: failure()
        run: "[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log"

  create-release:
    name: create github release
    # This job will only start if BOTH of the jobs above complete successfully.
    needs: [build-main-on-linux, build-lts-on-linux]
    runs-on: ubuntu-latest
    # This job will only run if the workflow is started manually.
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: set release tag
        id: set_tag
        run: echo "TAG_NAME=ffmpeg-kit-android-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: download all aar artifacts
        uses: actions/download-artifact@v4
        with:
          path: aar-artifacts
      - name: list downloaded files for debug
        run: ls -R aar-artifacts
      - name: create github release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android AARs (NDK r28-16k) - ${{ env.TAG_NAME }}"
          body: "Automated release of Android AAR files from Linux builds using NDK r28 with 16kB page size support."
          prerelease: true
          files: aar-artifacts/*/*.aar
