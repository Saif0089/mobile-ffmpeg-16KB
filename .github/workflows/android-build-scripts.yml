name: android build scripts

on:
  workflow_dispatch: # Allows manual triggering, which will create a release
  push:
    branches: [development, main]
    paths:
      - ".github/workflows/android-build-scripts.yml"
      - "android/**"
      - "!android/README.md"
      - "scripts/**"
      - "tools/**"
      - "android.sh"
  pull_request:
    branches: [development, main]
    paths:
      - ".github/workflows/android-build-scripts.yml"
      - "android/**"
      - "!android/README.md"
      - "scripts/**"
      - "tools/**"
      - "android.sh"

jobs:
  build-main-on-linux:
    name: android main on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    env:
      # Force 16KB page-size at link time
      LDFLAGS: "-Wl,-z,max-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"

      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1" || true

      # ⬇️ Replace the expiring GCS link with sdkmanager (installs r27b)
      - name: set up android ndk r27b (16k support)
        run: |
          set -euxo pipefail
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "ndk;27.2.12479018"
          echo "ANDROID_NDK_ROOT=${ANDROID_HOME}/ndk/27.2.12479018" >> $GITHUB_ENV

      - name: run the build script
        env:
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: ./android.sh -d --enable-android-media-codec --enable-android-zlib --disable-arm-v7a

      - name: prepare and upload main aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          # Keep your original artifact name; change to r27 if you want
          mv "$AAR_PATH" "ffmpeg-kit-main-ndk-r25-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-main-aar
          path: ffmpeg-kit-main-ndk-r25-16k.aar
          if-no-files-found: error

      - name: print build logs
        if: ${{ always() }}
        run: cat build.log

      - name: print ffbuild logs
        if: ${{ failure() }}
        run: "[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log"

  build-lts-on-linux:
    name: android lts on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    env:
      LDFLAGS: "-Wl,-z,max-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"

      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1" || true

      - name: set up android ndk r27b (16k support)
        run: |
          set -euxo pipefail
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "ndk;27.2.12479018"
          echo "ANDROID_NDK_ROOT=${ANDROID_HOME}/ndk/27.2.12479018" >> $GITHUB_ENV

      - name: run the build script
        env:
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: ./android.sh -d --lts --enable-android-media-codec --enable-android-zlib

      - name: prepare and upload lts aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-lts-ndk-r25-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-lts-aar
          path: ffmpeg-kit-lts-ndk-r25-16k.aar
          if-no-files-found: error

      - name: print build logs
        if: ${{ always() }}
        run: cat build.log

      - name: print ffbuild logs
        if: ${{ failure() }}
        run: "[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log"

  create-release:
    name: create github release
    needs: [build-main-on-linux, build-lts-on-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: set release tag
        id: set_tag
        run: echo "TAG_NAME=ffmpeg-kit-android-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV

      - name: download all aar artifacts
        uses: actions/download-artifact@v4
        with:
          path: aar-artifacts

      - name: list downloaded files for debug
        run: ls -R aar-artifacts

      - name: create github release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android AARs (NDK 16k) - ${{ env.TAG_NAME }}"
          body: "Automated release of Android AAR files using NDK with 16kB page-size support."
          prerelease: true
          files: aar-artifacts/*/*.aar
