name: Build MobileFFmpeg (Android)

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    name: Android Build (ubuntu-latest)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Set SDK/NDK paths the runner provides and auto-pick the latest NDK
      - name: Detect Android SDK/NDK
        shell: bash
        run: |
          set -euo pipefail
          SDK="/usr/local/lib/android/sdk"
          echo "ANDROID_SDK_ROOT=$SDK" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$SDK" >> "$GITHUB_ENV"
          # Pick the latest installed NDK by version
          LATEST_NDK="$(ls -1 "$SDK/ndk" | sort -V | tail -n1)"
          NDK="$SDK/ndk/$LATEST_NDK"
          echo "Using NDK: $NDK"
          echo "ANDROID_NDK_ROOT=$NDK" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$NDK" >> "$GITHUB_ENV"
          # Add LLVM toolchain to PATH the right way
          echo "$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Show Android environment
        shell: bash
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      # 2) Install build prereqs from README
      - name: Install prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool pkg-config curl cmake gcc gperf texinfo \
            yasm nasm bison autogen patch git

      # 3) Sanity: show toolchain versions
      - name: Toolchain sanity (versions)
        shell: bash
        run: |
          clang --version || true
          aarch64-linux-android24-clang --version

      # 4) Force lld and clean flags (defensive â€“ in case scripts read these)
      - name: Ensure lld + safe flags
        shell: bash
        run: |
          echo 'CFLAGS=-O2 -ffunction-sections -fdata-sections -flto=thin' >> "$GITHUB_ENV"
          echo 'LDFLAGS=-Wl,--gc-sections -flto=thin -fuse-ld=lld' >> "$GITHUB_ENV"
          # If your android.sh accidentally forces gold or old platform paths, strip them
          if [[ -f android.sh ]]; then
            sed -i -E 's/-fuse-ld=gold//g' android.sh || true
            sed -i -E 's|-L[^ ]*/android-ndk-r[0-9a-z]+/platforms/android-[0-9]+/arch-[^ ]+[^ ]*||g' android.sh || true
            sed -i -E 's/-D__ANDROID_API__=[0-9]+//g' android.sh || true
            chmod +x android.sh
          fi

      # 5) Link sanity test using lld
      - name: Link sanity test (lld)
        shell: bash
        run: |
          cat >/tmp/test.c <<'EOF'
          int main(void){ return 0; }
          EOF
          aarch64-linux-android24-clang \
            --sysroot="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
            -fuse-ld=lld -O2 -ffunction-sections -fdata-sections \
            -Wl,--gc-sections \
            /tmp/test.c -o /tmp/test
          file /tmp/test
          echo "Sanity OK"

      # 6) Build per README (android.sh)
      - name: Build (android.sh)
        shell: bash
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
        run: |
          set -euo pipefail
          ./android.sh

      # 7) Upload prebuilt results
      - name: Upload prebuilt artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-android
          path: prebuilt/**
          if-no-files-found: warn
