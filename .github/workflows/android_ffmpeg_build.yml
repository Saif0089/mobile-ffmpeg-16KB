name: Build MobileFFmpeg (Android)

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    name: Android Build (ubuntu-latest)
    runs-on: ubuntu-latest

    env:
      # Use the SDK & latest NDK that ubuntu-latest already provides
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_LATEST_HOME }}
      # These are set by the runner image; we re-export ANDROID_NDK_ROOT above.
      # ANDROID_NDK_LATEST_HOME is provided by the image.
      # (See runner image readme for exact values.)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runner image Android info
        run: |
          echo "SDK:  $ANDROID_SDK_ROOT"
          echo "NDK (default): $ANDROID_NDK_ROOT"
          echo "NDK (latest):  $ANDROID_NDK_LATEST_HOME"
          ls -la "$ANDROID_SDK_ROOT/ndk" || true

      - name: Install prerequisites (build tools)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool pkg-config curl cmake gcc gperf texinfo \
            yasm nasm bison autogen patch git

      - name: Select latest NDK and add LLVM toolchain to PATH
        shell: bash
        run: |
          # Prefer the latest NDK present on the hosted runner (r28.2)
          if [[ -n "${ANDROID_NDK_LATEST_HOME:-}" ]]; then
            export ANDROID_NDK_ROOT="$ANDROID_NDK_LATEST_HOME"
          fi
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> "$GITHUB_ENV"

          NDK_LLVM_BIN="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "NDK_LLVM_BIN=$NDK_LLVM_BIN" >> "$GITHUB_ENV"
          echo "PATH=$NDK_LLVM_BIN:$PATH" >> "$GITHUB_ENV"

      - name: Toolchain sanity (versions)
        shell: bash
        run: |
          echo "Using NDK at: $ANDROID_NDK_ROOT"
          "$NDK_LLVM_BIN/clang" --version
          "$NDK_LLVM_BIN/aarch64-linux-android24-clang" --version

      - name: Ensure lld (not gold) + clean flags
        shell: bash
        run: |
          # If your scripts read CFLAGS/LDFLAGS, push safe defaults
          echo 'CFLAGS=-O2 -ffunction-sections -fdata-sections -flto=thin' >> "$GITHUB_ENV"
          echo 'LDFLAGS=-Wl,--gc-sections -flto=thin -fuse-ld=lld' >> "$GITHUB_ENV"

          # If android.sh accidentally forces gold or legacy platform paths, strip them defensively
          if [[ -f android.sh ]]; then
            sed -i -E 's/-fuse-ld=gold//g' android.sh || true
            sed -i -E 's|-L[^ ]*/android-ndk-r[0-9a-z]+/platforms/android-[0-9]+/arch-[^ ]+[^ ]*||g' android.sh || true
            sed -i -E 's/-D__ANDROID_API__=[0-9]+//g' android.sh || true
            chmod +x android.sh
          fi

      - name: Link sanity test (lld)
        shell: bash
        run: |
          cat >/tmp/test.c <<'EOF'
          int main(void){ return 0; }
          EOF
          "$NDK_LLVM_BIN/aarch64-linux-android24-clang" \
            --sysroot="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
            -fuse-ld=lld -O2 -ffunction-sections -fdata-sections \
            -Wl,--gc-sections \
            /tmp/test.c -o /tmp/test
          file /tmp/test
          echo "Sanity OK"

      - name: Build (android.sh)
        shell: bash
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
        run: |
          set -euo pipefail
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
          ./android.sh

      - name: Upload prebuilt artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-android
          path: |
            prebuilt/**
          if-no-files-found: warn
