name: android build scripts

on:
  workflow_dispatch: # Allows manual triggering, which will create a release
  push:
    branches:
      - master

jobs:
  build-lts-on-linux:
    name: android lts on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"
      - name: Install build prerequisites
        run: |
          sudo apt-get update -y && sudo apt-get install -y \
            autoconf automake libtool pkg-config curl git \
            cmake gcc g++ gperf texinfo yasm nasm bison autogen patch make \
            m4 perl build-essential libc6-dev libstdc++6

          # legacy symlinks for older libraries like shine
          sudo ln -sf /usr/bin/aclocal /usr/bin/aclocal-1.15
          sudo ln -sf /usr/bin/automake /usr/bin/automake-1.15

          # uninstall older cmake versions if they exist (ignore errors)
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall \
            "cmake;3.10.2.4988404" "cmake;3.18.1" || true

      - name: set up android ndk r21e (16k support)
        run: |
          curl -L -s "https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip" -o ndk.zip
          if [ ! -f ndk.zip ]; then
            echo "Error: NDK download failed"
            exit 1
          fi
          unzip -q -o ndk.zip -d .ndk
          NDK_DIR=$(ls .ndk)
          if [ -z "$NDK_DIR" ]; then
            echo "Error: NDK extraction failed"
            exit 1
          fi
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$NDK_DIR" >> $GITHUB_ENV
          echo "NDK setup complete: $PWD/.ndk/$NDK_DIR"

      - name: Build FFmpeg (arm64-v8a only)
        run: |
          cd $GITHUB_WORKSPACE

          # Debug: Show NDK version and paths
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "NDK_PROJECT_PATH: $NDK_PROJECT_PATH"
          ls -la $ANDROID_NDK_ROOT || echo "NDK not found at expected path"

          # run the LTS debug build for arm64 only
          ./android.sh \
          --force \
          --disable-arm-v7a \
          --disable-x86-64 \
          --disable-arm-v7a-neon \
          --disable-x86 \

      - name: Show outputs
        if: always()
        run: ls -lR android/lts/output || true

      - name: Show generated Application.mk
        if: always()
        run: cat $(pwd)/android/jni/Application.mk

      - name: prepare and upload lts aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-lts-ndk-r21e-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-lts-16k-aar
          path: ffmpeg-kit-lts-ndk-r21e-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: "[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log"

  create-release:
    name: create github release
    # This job will only start if BOTH of the jobs above complete successfully.
    needs: [build-lts-on-linux]
    runs-on: ubuntu-latest
    # This job will only run if the workflow is started manually.
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: set release tag
        id: set_tag
        run: echo "TAG_NAME=ffmpeg-kit-android-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: download all aar artifacts
        uses: actions/download-artifact@v4
        with:
          path: aar-artifacts
      - name: list downloaded files for debug
        run: ls -R aar-artifacts
      - name: create github release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android AARs (NDK r21e-16k) - ${{ env.TAG_NAME }}"
          body: "Automated release of Android AAR files from Linux builds using NDK r21e with 16KB page size support."
          prerelease: true
          files: aar-artifacts/*/*.aar
