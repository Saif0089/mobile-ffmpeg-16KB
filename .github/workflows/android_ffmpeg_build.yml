name: Build MobileFFmpeg for Android (NDK r28c)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_ROOT: ${{ github.workspace }}/android-ndk-r28c

    steps:
      # 1Ô∏è‚É£ Checkout source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for git describe

      # 2Ô∏è‚É£ Install required system dependencies
      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            autoconf automake libtool pkg-config curl cmake gcc gperf texinfo yasm nasm bison autogen patch git \
            unzip zip build-essential python3 openjdk-17-jdk

      # 3Ô∏è‚É£ Download and cache Android NDK r28c
      - name: Cache Android NDK r28c
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_NDK_ROOT }}
          key: ndk-r28c-linux

      - name: Download NDK r28c (if not cached)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          echo "‚¨áÔ∏è Downloading Android NDK r28c..."
          wget https://dl.google.com/android/repository/android-ndk-r28c-linux.zip -O ndk.zip
          unzip -q ndk.zip
          echo "‚úÖ NDK extracted to $ANDROID_NDK_ROOT"

      # 4Ô∏è‚É£ Verify NDK setup
      - name: Verify NDK toolchain
        run: |
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          aarch64-linux-android24-clang --version || echo "clang not found!"
          echo "‚úÖ Verified NDK r28c toolchain."

      # 5Ô∏è‚É£ Prepare Android SDK (optional for some builds)
      - name: Install Android SDK Command-Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O tools.zip
          unzip -q tools.zip -d latest
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          echo "‚úÖ Android SDK ready."

      # 6Ô∏è‚É£ Prepare git submodules (required for FFmpeg + dependencies)
      - name: Prepare git submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      # 7Ô∏è‚É£ Build MobileFFmpeg for Android
      - name: Build MobileFFmpeg
        run: |
          export PATH="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export ANDROID_NDK=$ANDROID_NDK_ROOT
          export ANDROID_SDK=$ANDROID_HOME

          export CFLAGS="$(printf '%s' "$CFLAGS" | sed -E 's/-fuse-ld=gold//g; s/-D__ANDROID_API__=[0-9]+//g')"
          export LDFLAGS="$(printf '%s' "$LDFLAGS" | sed -E 's/-fuse-ld=gold//g; s|-L.*/android-ndk-r[0-9a-z]+/platforms/android-[0-9]+/arch-[^ ]+[^ ]*||g')"

          export CFLAGS="$CFLAGS -flto=thin"
          export LDFLAGS="$LDFLAGS -flto=thin -fuse-ld=lld"

          chmod +x android.sh
          ./android.sh

      # 8Ô∏è‚É£ Show build logs (if any errors)
      - name: Show build logs
        if: always()
        run: |
          echo "üîç Searching for build logs..."
          find . -type f -name build.log -exec echo "--- {} ---" \; -exec tail -n 100 {} \; || true
          find . -type f -name config.log -exec echo "--- {} ---" \; -exec tail -n 50 {} \; || true

      # 9Ô∏è‚É£ Archive build outputs
      - name: Upload prebuilt artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-ffmpeg-android-prebuilt
          path: prebuilt/
